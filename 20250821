# 설정 테스트(문법 확인)
clickhouse-server --check-config

SELECT name, value
FROM system.server_settings;

경로: /etc/clickhouse-server/config.d/10-memory-and-bg.xml
<clickhouse>
  <!-- ==== 메모리 전역 상한 (서버 전체) ==== -->
  <!-- 실제 상한 = min(max_server_memory_usage, RAM * ratio) -->
  <max_server_memory_usage>0</max_server_memory_usage>
  <max_server_memory_usage_to_ram_ratio>0.75</max_server_memory_usage_to_ram_ratio> <!-- 64G × 0.75 ≈ 48G -->

  <!-- ==== 백그라운드 동시성 (머지/뮤테이션/페치) ==== -->
  <background_merges_mutations_concurrency_ratio>1</background_merges_mutations_concurrency_ratio>
  <background_pool_size>8</background_pool_size>                 <!-- 병합·뮤테이션 워커 -->
  <background_move_pool_size>2</background_move_pool_size>       <!-- 파트 이동 -->
  <background_fetches_pool_size>4</background_fetches_pool_size> <!-- 복제/페치 -->

  <!-- ==== 캐시 (너무 크게 두지 않기) ==== -->
  <mark_cache_size>2147483648</mark_cache_size>   <!-- 2 GiB (대용량 스캔/정렬시 마크 히트 개선) -->
  <uncompressed_cache_size>0</uncompressed_cache_size> <!-- 보통 OFF 권장 -->

  <!-- ==== 딕셔너리 로드 전략 ==== -->
  <dictionaries_lazy_load>1</dictionaries_lazy_load> <!-- 최초 접근 시 로드: 부팅/메모리 피크 완화 -->

  <!-- (선택) NVMe 임시 경로가 있다면 아래를 실제 경로로 교체
  <tmp_path>/mnt/nvme0/clickhouse/tmp/</tmp_path>
  -->
</clickhouse>



경로: /etc/clickhouse-server/users.d/10-profiles.xml
<clickhouse>
  <profiles>
    <!-- 기본 프로필: 일반 분석/운영 쿼리 -->
    <default>
      <!-- 쿼리 하나당 메모리 상한(안정선) -->
      <max_memory_usage>4G</max_memory_usage>
      <!-- 동일 사용자 합산 상한 -->
      <max_memory_usage_for_user>12G</max_memory_usage_for_user>
      <!-- 모든 쿼리 합산 상한 (전역 상한으로 커버되므로 0) -->
      <max_memory_usage_for_all_queries>0</max_memory_usage_for_all_queries>

      <!-- 메모리 초과 전에 디스크 스필 유도 -->
      <max_bytes_before_external_group_by>512M</max_bytes_before_external_group_by>
      <!-- 대용량 ORDER BY 기본 성능을 위해 정렬 임계치는 1G로 완화 -->
      <max_bytes_before_external_sort>1G</max_bytes_before_external_sort>
      <max_bytes_before_external_join>512M</max_bytes_before_external_join>
      <join_algorithm>grace_hash</join_algorithm>

      <!-- 정렬키(in-order read) 최적화 유지 -->
      <optimize_read_in_order>1</optimize_read_in_order>

      <!-- 동시성: CPU=16 기준 보수 시작값 -->
      <max_threads>16</max_threads>
      <max_concurrent_queries>32</max_concurrent_queries>
    </default>

    <!-- (옵션) 대용량 정렬/집계용 프로필: 특정 무거운 작업에만 일시 사용 -->
    <heavy_orderby>
      <max_memory_usage>6G</max_memory_usage>                    <!-- 일시 상향 -->
      <max_memory_usage_for_user>18G</max_memory_usage_for_user>
      <max_memory_usage_for_all_queries>0</max_memory_usage_for_all_queries>

      <max_bytes_before_external_group_by>768M</max_bytes_before_external_group_by>
      <max_bytes_before_external_sort>2G</max_bytes_before_external_sort>  <!-- 정렬 스필 더 늦춤 -->
      <max_bytes_before_external_join>768M</max_bytes_before_external_join>
      <join_algorithm>grace_hash</join_algorithm>
      <optimize_read_in_order>1</optimize_read_in_order>

      <max_threads>16</max_threads>
      <max_concurrent_queries>32</max_concurrent_queries>
    </heavy_orderby>

    <!-- (옵션) 수집/스트리밍(Kafka→MV 등)용: 더 보수적 -->
    <ingest>
      <max_memory_usage>2G</max_memory_usage>
      <max_memory_usage_for_user>6G</max_memory_usage_for_user>
      <max_memory_usage_for_all_queries>0</max_memory_usage_for_all_queries>

      <max_bytes_before_external_group_by>256M</max_bytes_before_external_group_by>
      <max_bytes_before_external_sort>512M</max_bytes_before_external_sort>
      <max_bytes_before_external_join>256M</max_bytes_before_external_join>
      <join_algorithm>grace_hash</join_algorithm>
      <optimize_read_in_order>1</optimize_read_in_order>

      <max_threads>8</max_threads>
      <max_concurrent_queries>16</max_concurrent_queries>
    </ingest>
  </profiles>

  <!-- (예시) 특정 사용자에 heavy_orderby/ingest 프로필 매핑
  <users>
    <etl_user>
      <password>********</password>
      <profile>ingest</profile>
      <networks><ip>::/0</ip></networks>
    </etl_user>
    <analyst_heavy>
      <password>********</password>
      <profile>heavy_orderby</profile>
      <networks><ip>::/0</ip></networks>
    </analyst_heavy>
  </users>
  -->
</clickhouse>


spring:
  datasource:
    url: jdbc:clickhouse:http://<host>:8123/<db>   # (예시) HTTP 모드
    driver-class-name: com.clickhouse.jdbc.ClickHouseDriver
    hikari:
      maximum-pool-size: 16
      minimum-idle: 1
      idle-timeout: 600000       # 10m
      max-lifetime: 1800000      # 30m (DB/프록시 타임아웃보다 짧게)
      keepalive-time: 0          # ✅ 주기적 keepalive 비활성화
      validation-timeout: 5000
      # connection-test-query: "" # ⛔ 굳이 넣지 마세요(미설정 권장)


