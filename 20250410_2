
SET join_algorithm = 'partial_merge';
SET prefer_partial_merge_join = 1;


Layout	설명	크기 한계
FLAT      : 키 개수가 적고 정적일 때 최적	최대 수백만 개 (메모리 전체 상주)
HASHED    :	대부분 빠르고 범용적	수천만 개까지 가능
COMPLEX_KEY_HASHED : (복합 키용) 빠름	수백만~수천만 OK
CACHE :	메모리에 일부만 유지 (LRU 캐시)	수억 건까지 확장 가능
DIRECT : 조회 시마다 원본 조회 (느림)	아주 큰 데이터 처리 가능, 하지만 느림


SELECT A.*
      , B.AI_RESULT
FROM TEST A
ANY INNER JOIN TEST_AI B 
 ON A.PKT_SEQ = B.PKT_SEQ
WHERE A.OCCR_DT BETWEEN '202501010920' AND '202504010920'
  AND A.STRTITLE = 'apple'
  AND B.AI_RESULT > 50
ORDER BY A.TMSTART, A.OCCR_DT, A.PKT_SEQ DESC LIMIT 100 OFFSET 0
;


SELECT A.*
      , B.AI_RESULT
FROM TEST A
ANY LEFT JOIN TEST_AI B 
 ON A.PKT_SEQ = B.PKT_SEQ
WHERE A.OCCR_DT BETWEEN '202501010920' AND '202504010920'
  AND A.STRTITLE = 'apple'
ORDER BY A.TMSTART, A.OCCR_DT, A.PKT_SEQ DESC LIMIT 100 OFFSET 0
;


CREATE MATERIALIZED VIEW mv_test_with_ai
ENGINE = MergeTree
ORDER BY (TMSTART, OCCR_DT, PKT_SEQ)
AS
SELECT A.*, B.AI_RESULT
FROM TEST A
ANY LEFT JOIN TEST_AI B 
  ON A.PKT_SEQ = B.PKT_SEQ;

CREATE DICTIONARY dict_test_ai
(
    PKT_SEQ String,
    AI_RESULT Int32
)
PRIMARY KEY PKT_SEQ
SOURCE(CLICKHOUSE(
    HOST 'localhost' 
    PORT 9000 
    USER 'default' 
    TABLE 'TEST_AI' 
    PASSWORD ''
))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 30); -- 30초 이내 재로딩


SELECT *,
       dictGet('dict_test_ai', 'AI_RESULT', tuple(PKT_SEQ)) AS AI_RESULT
FROM TEST
WHERE OCCR_DT BETWEEN '202501010920' AND '202504010920'
  AND STRTITLE = 'apple'
  AND dictGet('dict_test_ai', 'AI_RESULT', tuple(PKT_SEQ)) > 50
ORDER BY TMSTART, OCCR_DT, PKT_SEQ DESC
LIMIT 100 OFFSET 0;

SELECT *,
       dictGetOrDefault('dict_test_ai', 'AI_RESULT', tuple(PKT_SEQ), -1) AS AI_RESULT
FROM TEST
WHERE OCCR_DT BETWEEN '202501010920' AND '202504010920'
  AND STRTITLE = 'apple'
ORDER BY TMSTART, OCCR_DT, PKT_SEQ DESC
LIMIT 100 OFFSET 0;
